Accumulator Generator --

Revenge of the Nerds yielded a 
collection of canonical solutions to the same problem in 
a number of languages.The problem: Write a function foo that takes a number n and returns a 
plus.

C++                   template
                      struct Acc 


                        template
                        Acc(const Acc& u)
                        : n(u.n) 


                        template
                        T operator()(U i) 




                      template
                      Acc foo(T n)
                      


Dylan                 define function foo (n)


E                     def foo (var n) :any 
                      


Erlang                foop(N)-
                        receive
                          - S =N+I, P!S, foop(S)
                        end.

                      foo(N)-
                        P=spawn(foo,foop,[N]),
                        fun(I)-
                          P!,
                          receive V-V end
                        end.


Haskell               import IOExts
                      foo n = do
                        r  do
                          modifyIORef r (+i)
                          readIORef r)


Javascript            function foo (n)  


Lisp: Arc             (def foo (n) [++ n _])


Lisp: Common Lisp     (defun foo (n) 
                        (lambda (i) (incf n i)))


Lisp: Goo             (df foo (n) (op incf n _))


Lisp: Scheme          (define (foo n)
                        (lambda (i)
                          (set! n (+ n i))
                          n))


Lua                   function foo(n)
                        return function (i)
                                 n = n + i
                                 return n
                               end
                      end


Maple                 foo := proc(n)
                               proc(i) s := s + i   
                                 end
                             end


Mathematica           foo = Module[,s+=# &] &


Mozart                fun 
                        A = 
                      in
                         fun  C D in
                            
                            if 
                               andthen 
                            then
                               D = +B
                            elseif 
                               andthen 
                            then
                               D = C+
                            else D = C+B end
                            
                         end
                      end


NewtonScript          foo := func (n)
                               func (i)


Perl 5                sub foo 
                      


Python                class foo:
                        def __init__(self, n):
                            self.n = n
                        def __call__(self, i):
                            self.n += i
                            return self.n


Rebol                 foo: func [ n ] 
                       [ func [ i ] [ n: n + i ] ]


Ruby                  def foo (n)
                        lambda  end


Smalltalk             foo: n
                        |s|
                        s := n.
                        ^[:i| s := s + i. ]


VBScript              Class acc
                        Private n
                        Public Default Function inc(i)
                          n = n + i
                          inc = n
                        End Function
                      End Class

                      Function foo(n)
                        Dim bar
                        Set bar = New acc
                        bar(n)
                        Set foo = bar
                      End Function
Some languages are not represented here, either because you
can't write this program in them (short of Greenspun's Tenth Rule)
or because no one has yet sent me the code for that language.
send it along.  --Please don't send may any new submissions for the time being; I
don't have time to look at them.
Erlang, Heinz Eriksson; Goo, Jonathan Bachrach; Haskell, Malcolm Wallace
Smalltalk, Trevor Blackwell; VBScript, Stefan Holm.




    









